What is service:
1. Which will contain the Business rules.
2. Can be used for code reusability.
3. It can be also used to interact with API/Backend.
4. Pass data between components.

How to create a service:
1. Run "ng g service <service_name>"
2. All services will have @Injectable decorator.

How to use a service:
1. Injet the service into components constructor.
2. 

What is DI:
1. This stands for Dependecny Injection
2. It is widely used Design Pattern.
3. It says never create an instance of class directly into your class.
4. Always inject the service/class.
5. Angular has its own DI framework.

Singleton:
1. It is a Design Pattern.
2. If it is registered in app.module.ts/ Root Module.

Non-Singleton:
1.we can register the service, with its own component.

to register a service:
 { provide: EmployeeService, useClass: EmployeeService }

 Types of services:
 1. Class based service. -- where we use clas to provide service.
 Non-class based services.
 2. Value Provider -- Use static data as service.
 3. Factory  -- To be discussed  during routing


To create a value provide:
1.Create interface based on requirement.
2.Create a file , and use InjectionToken to create a service.
export let AppConstant = new InjectionToken<IAppConstant>('app.constant'); where app.constant is our file name.
3.Declare a variable with type of interface and provide all values.

To use value Provider.
use @Inject() to inject the service.



Factory:
Why:

In case we want the instance of service to be generated at runtime.

Scenario: We want some data in productService from login service.

how:

import { LoginService } from '../login/login.service';
import { TodoService } from './todo.service';
import { HttpClient } from '@angular/common/http';

export function todoServiceProvider(loginService: LoginService, http: HttpClient) {
    return new TodoService(loginService.isLoggedIn, http);
}

export let todoFactory = {
    provide: TodoService,
    useFactory: todoServiceProvider,
    deps: [LoginService, HttpClient]
}
